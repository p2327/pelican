var tipuesearch = {"pages":[{"title":"Streams","text":"Today we are looking at streams, a way to represent sequential data implicitly . What is a stream? A stream is a lazily computed linked list. Let's design a class to achieve this lazy evaluation: class Stream : \"\"\" A lazily computed linked list. \"\"\" class empty : def __repr__ ( self ): return 'Stream.empty' empty = empty () def __init__ ( self , first , compute_rest = lambda : empty ): assert callable ( compute_rest ), 'compute_rest must be callable.' self . first = first self . _compute_rest = compute_rest @property def rest ( self ): \"\"\" Return the rest of the stream, computing it if necessary. \"\"\" if self . _compute_rest is not None : self . _rest = self . _compute_rest () self . _compute_rest = None return self . _rest def __repr__ ( self ): return 'Stream( {0} , <...>)' . format ( repr ( self . first )) We will use this to build a small program that calculates prime numbers. TODO","tags":"programming","url":"/streams.html","loc":"/streams.html"},{"title":"Dispatch dictionaries","text":"The dispatch function is a general method for implementing a message passing interface for abstract data. In this post we'll see how to use dispatch dictionaries to build a (simplified) RNA translation machine. TODO from collections import deque def rna_translate ( seq ): \"\"\"A rna translation machine using a dispatch dictionary and deque\"\"\" bases = list ( seq ) # prepare list of ribonucleic bases bases_q = deque ( bases ) codon = [] protein = [] def ribosome ( s ): # processes the bases queue if len ( bases_q ) == 0 : return protein while len ( codon ) <= 3 : codon . append ( bases_q . popleft ()) if len ( codon ) == 3 : snip = '' . join ( codon [ 0 : 3 ]) # assembly the codon return translate ( snip ) def translate ( c ): # reads the codon snip into an amino acid nonlocal protein nonlocal codon stop_codons = [ 'UAA' , 'UAG' , 'UGA' ] if c in stop_codons : return protein protein += [ dispatch [ c ]] # add the amino to our protein sequence codon = [] # reset the codon return ribosome ( codon ) dispatch = { 'AUG' : 'Methyonine' , 'UUU' : 'Phenylalanine' , 'UUC' : 'Phenylalanine' , 'UUG' : 'Leucine' , 'UUA' : 'Leucine' , 'UAU' : 'Tyrosine' , 'UAC' : 'Tyrosine' , 'UGU' : 'Cysteine' , 'UGC' : 'Cysteine' , 'UGG' : 'Tryptophan' , 'UAA' : 'STOP' , 'UAG' : 'STOP' , 'UGA' : 'STOP' } return ribosome ( bases_q )","tags":"programming","url":"/dispatch.html","loc":"/dispatch.html"},{"title":"Effective pandas (Part 1)","text":"Pandas is one of the most used python libraries for data analysis. In this series of post we'll look at some best practices to use it effectively. TODO","tags":"data analysis","url":"/pandas.html","loc":"/pandas.html"},{"title":"Science questions (Part 1)","text":"In this post we'll build a data application using the Allen School Science Questions dataset. TODO","tags":"web development","url":"/scienceapp.html","loc":"/scienceapp.html"},{"title":"Reddit posts webapp (Part 1)","text":"Today we are going to build a web scraper, save the data in MongoDB Atlas, build a front end aplication, write a mailer service. setup gitlab for scheduling... TODO","tags":"web development","url":"/reddit.html","loc":"/reddit.html"},{"title":"Building a ML webapp (Part 1)","text":"In this project we will: * Build a classifier model using TensorFlow * Create a webservice using Jupyet Kernel Gateway * Build an application that consume the service * Host the application on Google Cloud Platform TODO","tags":"machine learning","url":"/flowerapp.html","loc":"/flowerapp.html"},{"title":"CLI cypher","text":"In this post we will build a text cypher using Python CLI and the click package. TODO","tags":"programming","url":"/clicypher.html","loc":"/clicypher.html"},{"title":"Writing a Python library (Part 1)","text":"Post for mltools TODO","tags":"programming","url":"/lib.html","loc":"/lib.html"},{"title":"The blue book of bulldozers (Part 1)","text":"Today we are going to work on a dataset from Kaggle . TODO # Test pygment.css def abc (): for a in a : if a == b : print ( c ) return None","tags":"data analysis","url":"/bulldozers-1.html","loc":"/bulldozers-1.html"}]};